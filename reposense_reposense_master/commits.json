{
  "authorDailyContributionsMap": {
    "ccyccyccy": [
      {
        "insertions": 6,
        "deletions": 0,
        "date": "2020-01-07",
        "commitResults": [
          {
            "hash": "6476b251fea6d28942cb769bf5100f5894ef7d4c",
            "messageTitle": "[#747] SystemTest: Delete ft_temp folder after test (#973)",
            "messageBody": "ft_temp folder is generated after running system test.\r\n\r\nThis folder is unnecessary to stay in our repo directory and may \r\nconfuse code navigation.\r\n\r\nLet\u0027s add a cleanup method to delete the folder after the system \r\ntest.",
            "insertions": 6,
            "deletions": 0
          }
        ]
      },
      {
        "insertions": 10,
        "deletions": 2,
        "date": "2020-01-21",
        "commitResults": [
          {
            "hash": "8054c6a8fd32a797ca443cd9052cd41a5e8e09da",
            "messageTitle": "[#940] ReportGenerator#generateReposReport: SLAP copying of template file (#977)",
            "messageBody": "The operation to copy template file before cloning and analyzing the\r\nrepositories in ReportGenerator#generateReposReport is specified at \r\na granular level.\r\n\r\nIt clashes with the higher level of abstraction used for the other\r\noperations in ReportGenerator#generateReposReport.\r\n\r\nLet\u0027s abstract out the copying of template files into a separate \r\nmethod and then call this method from \r\nReportGenerator#generateReposReport.",
            "insertions": 10,
            "deletions": 2
          }
        ]
      },
      {
        "insertions": 4,
        "deletions": 0,
        "date": "2020-03-02",
        "commitResults": [
          {
            "hash": "43c189865df7ace5cb2e17792b65b4227a6f0b16",
            "messageTitle": "[#1044] Update date hashes on reset date range (#1068)",
            "messageBody": "Resetting the date range would occasionally not change the date \r\nhashes in the URL, causing a refresh of the page to load the \r\noutdated filter date range. \r\n\r\nThis bug occurs when until or since date is not specified on\r\ngenerating the report.\r\n\r\nLet\u0027s make sure that the date hashes gets updated all the time.",
            "insertions": 4,
            "deletions": 0
          }
        ]
      }
    ],
    "Parcly-Taxel": [],
    "niqiukun": [],
    "openorclose": [],
    "yash-chowdhary": [
      {
        "insertions": 7,
        "deletions": 6,
        "date": "2020-02-12",
        "commitResults": [
          {
            "hash": "cc28942504f513fc7c277c6eda0ac01b353ae962",
            "messageTitle": "[#1021]: Use BASE_URL constant instead of string  (#1033)",
            "messageBody": "There are multiple occurrences of the same string \r\n\u0027https://github.com\u0027 in the frontend.\r\n\r\nLet\u0027s replace the string with a constant \u0027BASE_URL\u0027 in the files.",
            "insertions": 7,
            "deletions": 6
          }
        ]
      }
    ],
    "anubh-v": [
      {
        "insertions": 52,
        "deletions": 23,
        "date": "2019-12-01",
        "commitResults": [
          {
            "hash": "175bed2ea6ad27c54c91c14b9ef7edb229df67c1",
            "messageTitle": "[#806, #951] ReportGenerator: return paths of generated files (#939)",
            "messageBody": "The method `ReportGenerator#generateReposReport` returns a list of\r\npaths to the JSON files that need to be zipped. \r\n\r\nHowever, the list is made up by the file paths of expected output and\r\nnot the file paths of actual generated files. As a good practice, and\r\nalso to ensure that only the correct files are zipped, the latter is\r\npreferred. \r\n\r\nLet\u0027s return a Optional\u003cPath\u003e from `FileUtil#writeJsonFile` so that\r\ncallers of this method can determine whether a JSON file was\r\nsuccessfully generated.\r\n\r\nThis allows `generateReposReport` to only return paths to JSON files\r\nthat were successfully generated.\r\n",
            "insertions": 52,
            "deletions": 23
          }
        ]
      },
      {
        "insertions": 76,
        "deletions": 4,
        "date": "2019-12-03",
        "commitResults": [
          {
            "hash": "c6ffecd214e73fc8ecf97a742108af5ac6d2ceab",
            "messageTitle": "[#871, #952] CSV files: ignore blank lines before the header (#903)",
            "messageBody": "CsvParser treats the first non-empty line as the header row.\r\n\r\nWhen a CSV file contains blank line(s) above the header, the blank line\r\nwould be taken as the header, causing the subsequent rows in the CSV\r\nfile to be flagged as malformed. Hence, any CSV file with blank lines\r\nbefore the header will be parsed incorrectly. \r\n\r\nLet\u0027s modify CsvParser such that it skips all the blank lines preceding\r\nthe header, and picks the first non blank line as the header.\r\n\r\nThe Apache Commons CSV library currently does not provide any methods\r\nto skip blank lines preceding the header. This limitation is documented\r\nin:\r\nhttps://issues.apache.org/jira/browse/CSV-127 \r\n\r\nHence, let\u0027s implement a custom line-skipping behavior using a\r\nBufferedReader.",
            "insertions": 76,
            "deletions": 4
          }
        ]
      },
      {
        "insertions": 10,
        "deletions": 4,
        "date": "2019-12-08",
        "commitResults": [
          {
            "hash": "a2adb592431b2ee59fb3d22a3f6c8ab703870de9",
            "messageTitle": "[#934] CsvParser: Remove extra comma in warning logs (#935)",
            "messageBody": "When a line in a CSV config is found to be malformed, the logger prints \r\nthe contents of the line in a warning message. The current method causes\r\nan extra comma to be printed.\r\n\r\nThis extra comma may make debugging more confusing.\r\n\r\nLet\u0027s modify the method used to extract the contents of a line, such \r\nthat there are no extra commas.",
            "insertions": 10,
            "deletions": 4
          }
        ]
      },
      {
        "insertions": 81,
        "deletions": 15,
        "date": "2019-12-20",
        "commitResults": [
          {
            "hash": "b9c5665aeca76200e3ea11ba9b6936768e5d6f2c",
            "messageTitle": "[#736] CLI: allow \"--ignore-standalone-config\" flag to override CSV values (#928)",
            "messageBody": "RepoSense ignores the --ignore-standalone-config command line flag when\r\nparsing a repo-config csv file.\r\n\r\nWe can allow the --ignore-standalone-config command line flag to\r\noverride all entries in the \"Ignore Standalone Config\" column of\r\nrepo-config.csv. This provides users with an easy method of setting\r\nthis flag for all repos, without having to edit each line of the csv.\r\n\r\nTo achieve this, let\u0027s move the isStandaloneConfigIgnored attribute\r\nfrom the LocationsCliArguments class, to its superclass: CliArguments.\r\nThis will allow us to access the --ignore-standalone-config flag\u0027s\r\nvalue when parsing RepoConfigurations from both LocationsCliArguments\r\nand ConfigCliArguments.",
            "insertions": 81,
            "deletions": 15
          }
        ]
      },
      {
        "insertions": 65,
        "deletions": 10,
        "date": "2020-01-02",
        "commitResults": [
          {
            "hash": "1fa50ce7250a470a8bd13efb807b8a8e8de16bc5",
            "messageTitle": "[#872] CsvParser: improve exception handling when a csv file has incorrect number of columns in header (#955)",
            "messageBody": "RepoSense crashes abruptly when any of the CSV config files do not \r\nhave the expected number of columns in their headers.\r\n\r\nWe should catch this error early and provide the user with a clearer\r\nerror message.\r\n\r\nLet\u0027s add a header validation step to the CSV parsing process. This \r\nstep will verify if the CSV file\u0027s header has the right number of \r\ncolumns.\r\n",
            "insertions": 65,
            "deletions": 10
          }
        ]
      },
      {
        "insertions": 34,
        "deletions": 8,
        "date": "2020-01-29",
        "commitResults": [
          {
            "hash": "2ab7f7bf3549276c695361761d97e1246d3f0f4e",
            "messageTitle": "[#1001] CSS: Increase z-index for center divider div (#1011)",
            "messageBody": "When we scroll horizontally in the Code Panel, the code snippets and \r\ncode toggle buttons overlap with the center divider.\r\n\r\nLet\u0027s fix this bug by increasing the z-index of the #tab-resize div, and \r\nthe div that closes the right tab. We can use a value of 100, since the \r\nz-index of #tab-resize-guide div is already set to 100. For better \r\nscalability, let\u0027s also use a SASS map to store these z-index values.\r\n",
            "insertions": 34,
            "deletions": 8
          }
        ]
      },
      {
        "insertions": 1,
        "deletions": 1,
        "date": "2020-02-04",
        "commitResults": [
          {
            "hash": "7669ae7df6806e2d423f09b93fee41d560bf0643",
            "messageTitle": "[#1032] Author: fix error in copy constructor (#1036)",
            "messageBody": "The Author class has a constructor that accepts an existing Author\r\nobject and creates a copy. \r\n\r\nHowever, the constructor assigns the list of author aliases of the \r\ncopied instance to the `ignoreGlobList` attribute of the new \r\ninstance.\r\n\r\nLet\u0027s fix this error so methods that use this constructor will not\r\nface erroneous behavior.",
            "insertions": 1,
            "deletions": 1
          }
        ]
      },
      {
        "insertions": 71,
        "deletions": 66,
        "date": "2020-02-10",
        "commitResults": [
          {
            "hash": "bc8baa4141177952c4387859e5e15a55c35d1691",
            "messageTitle": "[#942] CsvParser: Improve exception handling when csv config has no valid recods (#916)",
            "messageBody": "RepoSense crashes with an unhelpful error message if the repo-config\r\ncsv has zero valid records.\r\n\r\nIf the repo-config csv has no valid records, we should provide a\r\nclear warning to the user and then terminate execution. In the case \r\nof optional csv files, we should provide a warning and then continue \r\nexecution.\r\n\r\nLet\u0027s \r\n- implement this behaviour by explicity checking the number of valid\r\n  records found by CsvParser. \r\n- throw an InvalidCsvException if there are no valid records in a \r\n  csv file. ",
            "insertions": 71,
            "deletions": 66
          }
        ]
      },
      {
        "insertions": 10,
        "deletions": 25,
        "date": "2020-02-20",
        "commitResults": [
          {
            "hash": "8753203b42d19dd4abd6cb337ec349d4087c4f29",
            "messageTitle": "[#1022] FileInfoAnalyzer: Deprecate \"//@reused\" tag (#1039)",
            "messageBody": "RepoSense will not include a file in the authorship analysis if the \r\nfirst line of the file contains the `//@reused` string.\r\n\r\nThis feature is not being used.\r\n\r\nLet\u0027s remove this feature to simplify the codebase.\r\n",
            "insertions": 10,
            "deletions": 25
          }
        ]
      }
    ],
    "Tejas2805": [
      {
        "insertions": 3,
        "deletions": 6,
        "date": "2019-12-20",
        "commitResults": [
          {
            "hash": "efa7969f68907fc07ae3b17a5027f6aa5e876f07",
            "messageTitle": "[#931] Code view: Default sorting in descending order (#932)",
            "messageBody": "In Code view, the default order for LoC is ascending.\r\n\r\nLet\u0027s make the default order descending as it is more meaningful to\r\nhave bigger changes on top as they should be more interesting.\r\n",
            "insertions": 3,
            "deletions": 6
          }
        ]
      },
      {
        "insertions": 56,
        "deletions": 1,
        "date": "2019-12-21",
        "commitResults": [
          {
            "hash": "4e4ffa26b9d07cc0ef963c688737a45345e78f0d",
            "messageTitle": "[#352] User Guide: add quick start guide to use RepoSense with Netlify (#924)",
            "messageBody": "Users would need to download .jar file to run RepoSense.\r\n\r\nLet\u0027s add a quick start section to User Guide to instruct users to \r\nuse RepoSense through Netlify so they can get started without \r\ndownloading any files. This should ease users into using RepoSense.\r\n",
            "insertions": 56,
            "deletions": 1
          }
        ]
      },
      {
        "insertions": 4,
        "deletions": 5,
        "date": "2020-01-16",
        "commitResults": [
          {
            "hash": "74ac22a3848f1009bab31d3ecb865c00f227e71e",
            "messageTitle": "[#947] Synchronising different tab views (#948)",
            "messageBody": "It\u0027s difficult to distinguish between the authorship and zoom views as \r\nthere are no obvious symbols to identify which is which. \r\n\r\nLet\u0027s add a header to both the views for easy identification and a link \r\nto the zoom title to make it more consistent with authorship.",
            "insertions": 4,
            "deletions": 5
          }
        ]
      },
      {
        "insertions": 255,
        "deletions": 254,
        "date": "2020-01-22",
        "commitResults": [
          {
            "hash": "b3aaf1c56e3e81eda3c99e7eb66e19fe3c89a7d9",
            "messageTitle": "[#960]Refactor Authorship Css (#986)",
            "messageBody": "The JS/HTML code of each component has already rested in its own \r\nfile, but all the CSS are still in one file. \r\n\r\nLet\u0027s refactor the Authorship CSS into a new file for better \r\nscalability and readability.\r\n",
            "insertions": 255,
            "deletions": 254
          }
        ]
      },
      {
        "insertions": 177,
        "deletions": 176,
        "date": "2020-01-30",
        "commitResults": [
          {
            "hash": "5b1fb323dc18c52e930158a4cdd184232dd8a826",
            "messageTitle": "[#960] Refactor Summary CSS (#1003)",
            "messageBody": "The JS/HTML code of each component has already rested in its own \r\nfile, but all the CSS are still in one file. \r\n\r\nLet\u0027s refactor the Summary CSS into a new file for better scalability \r\nand readability.\r\n\r\n",
            "insertions": 177,
            "deletions": 176
          }
        ]
      },
      {
        "insertions": 3,
        "deletions": 6,
        "date": "2020-02-03",
        "commitResults": [
          {
            "hash": "b98f31eaa04839fa7d3883b684f933bd51241a93",
            "messageTitle": "[#964] Add UG link to report page (#983)",
            "messageBody": "The link to the UG in the documents points to the released version of \r\nthe UG. As a result, there may be some discrepancies between the master \r\nand the release branch.\r\n\r\nLet\u0027s add a link to the UG on the report page corresponding to the \r\nversion that RepoSense was ran on.",
            "insertions": 3,
            "deletions": 6
          }
        ]
      },
      {
        "insertions": 18,
        "deletions": 10,
        "date": "2020-02-05",
        "commitResults": [
          {
            "hash": "0b151faf17df809193000461713a2b4b1329a50b",
            "messageTitle": "[#873, #1016, #1049]Enable octocat icon for merge group (#1017)",
            "messageBody": "There are not a lot of features that the user can use when merge \r\ngroup is active. \r\n\r\nLet\u0027s \r\n  - add the octocat icon to enhance the usage of merge group. \r\n  - fix the thickness of contribution bars by changing rem to pix.\r\n\r\nWhen it\u0027s `group by Repo`, the octocat icon will link to the group\u0027s\r\nrepository. When it\u0027s `group by Author`, the octocat icon will link \r\nto the author\u0027s github profile. \r\n",
            "insertions": 18,
            "deletions": 10
          }
        ]
      },
      {
        "insertions": 39,
        "deletions": 38,
        "date": "2020-02-14",
        "commitResults": [
          {
            "hash": "5cd4123966a51b1916858b08bc45d12014ad8157",
            "messageTitle": "[#960] Refactor Ramp CSS (#1055)",
            "messageBody": "The JS/HTML code of each component has already rested in its own \r\nfile, but all the CSS are still in one file. \r\n\r\nLet\u0027s refactor the Ramp CSS into a new file for better scalability \r\nand readability.\r\n",
            "insertions": 39,
            "deletions": 38
          }
        ]
      },
      {
        "insertions": 37,
        "deletions": 15,
        "date": "2020-02-22",
        "commitResults": [
          {
            "hash": "1a08d0561a7c29283c532f0d064b6b88ba6dedee",
            "messageTitle": "[#522] Implement style checker on .pug files (#987)",
            "messageBody": "RepoSense has CheckStyle, ESLint and Stylelint to check our java, \r\njavascript and css code styles automatically. However, `.pug` files \r\nare not covered by any of these tools.\r\n\r\nLet\u0027s implement pug-lint to check the code styles of .pug files.\r\n\r\nTODO: Add a line wrap rule in the future\r\n",
            "insertions": 26,
            "deletions": 1
          },
          {
            "hash": "7d16236189d17e4a12926337863b81d3708fe53f",
            "messageTitle": "[#906, #994, #1006] UserGuide: update doc and remove errors (#907)",
            "messageBody": "With the recently added group-config.csv file, the new changes \r\npossible in the local configuration are not reflected in the\r\ndocumentation.\r\n\r\nUsers can configure their csv files to analyse multiple repos in \r\ntheir own custom way, but they may be confused about how to do so as \r\nthe user guide is outdated. \r\n\r\nLet\u0027s update the user guide to reflect the changes possible through\r\ngroup-config.csv in the local configuration to analyse multiple \r\nrepos. Let\u0027s also fix the errors in the Tool Bar section and fix the \r\nformatting of repo-config.csv example.\r\n",
            "insertions": 11,
            "deletions": 14
          }
        ]
      },
      {
        "insertions": 8,
        "deletions": 12,
        "date": "2020-02-26",
        "commitResults": [
          {
            "hash": "8675a0b190ffdac5898a698fea69f41448084658",
            "messageTitle": "[#947] Authorship view: update sort controls (#1074)",
            "messageBody": "The sort controls in the Authorship view are a value updated by\r\nwatched property. \r\n\r\nThis is not as efficient as a computed property. \r\n\r\nLet\u0027s make the sort controls in Authorship view a computed property. \r\nThis will also help in making the code across different views \r\nconsistent.\r\n",
            "insertions": 8,
            "deletions": 12
          }
        ]
      },
      {
        "insertions": 94,
        "deletions": 93,
        "date": "2020-02-27",
        "commitResults": [
          {
            "hash": "893436fbf6dacf5eca051b42f3327bbdef942727",
            "messageTitle": "[#960] Refactor Zoom CSS (#1079)",
            "messageBody": "The JS/HTML code of each component has already rested in its own \r\nfile, but all the CSS are still in one file. \r\n\r\nLet\u0027s refactor the Zoom CSS into a new file for better scalability \r\nand readability.\r\n",
            "insertions": 94,
            "deletions": 93
          }
        ]
      }
    ],
    "dvrylc": [],
    "jamessspanggg": [
      {
        "insertions": 43,
        "deletions": 0,
        "date": "2019-12-20",
        "commitResults": [
          {
            "hash": "008f48fc20af630d857cd65bf11e96d05e19559a",
            "messageTitle": "[#46] Show total time after batch processing (#758)",
            "messageBody": "After running the CLI command, the total time taken to process and \r\ngenerate the report is not shown in the console output.\r\n\r\nUsers might find it useful to keep track of the time taken to \r\ngenerate the report.\r\n\r\nLet\u0027s use the logger to output the total time taken from running the \r\nCLI command until the report is generated.\r\n",
            "insertions": 43,
            "deletions": 0
          }
        ]
      },
      {
        "insertions": 49,
        "deletions": 42,
        "date": "2019-12-31",
        "commitResults": [
          {
            "hash": "2b2a9f3666d7c14d0c0ebe05b26660d0bf7827ba",
            "messageTitle": "[#785] ChartView: fix authors with unaccounted lines (#789)",
            "messageBody": "The git blame command used in RepoSense contains the option -w, which\r\nignores whitespace when comparing the parent’s version and the child’s\r\nto find where the lines came from.\r\n\r\nWhen an author did not change the content but only the position of\r\nspecific lines of code, the previous author will be recognised as the \r\nauthor that changed these lines. If the previous author did not\r\ncontribute during the analysis period, his/her ramp chart will be\r\nempty while the contribution bar will be present.\r\n\r\nLet\u0027s add an extra check in aggregateBlameInfo for lines of code with\r\nthe author committed date that is not within the duration of \r\nspecified since date and until date. Those lines of code\u0027s author will\r\nbe set to unknown, which will resolve the issue above.",
            "insertions": 49,
            "deletions": 42
          }
        ]
      },
      {
        "insertions": 94,
        "deletions": 9,
        "date": "2020-01-22",
        "commitResults": [
          {
            "hash": "e2f1ec8fffe7ed8140bc9af968f7d26582a67fdd",
            "messageTitle": "[#879] Display commit tags in commits panel (#969)",
            "messageBody": "The tags of each commit are not shown in the commits panel.\r\n\r\nWith the active use of git tags in CS21x3 repositories, it is useful to \r\nprovide tutors on the usage and information of tags in each commit.\r\n\r\nLet\u0027s display the tags of each commit (if there\u0027s any) in the commits \r\npanel.",
            "insertions": 94,
            "deletions": 9
          }
        ]
      },
      {
        "insertions": 3,
        "deletions": 3,
        "date": "2020-01-29",
        "commitResults": [
          {
            "hash": "8ed76d0dfebad2e509d87879661501239c35acb9",
            "messageTitle": "[#984] Fix miscalculation of expanded commit message count (#998)",
            "messageBody": "We get the number of expanded commit message count in zoom tab based on\r\nthe number of divs with class name \u0027commit-message active\u0027.\r\n\r\nCommit messages without commit message bodies also have default class\r\nname of \u0027commit-message active\u0027, which leads to the expanded commit\r\nmessage count to not reflect on the true number of commit messages that\r\nare expanded.\r\n\r\nLet\u0027s append the class name \u0027message-body\u0027 to commit messages that have\r\ncommit message bodies, to distinguish between messages that can be\r\nexpanded and vice versa.\r\n",
            "insertions": 3,
            "deletions": 3
          }
        ]
      },
      {
        "insertions": 1,
        "deletions": 0,
        "date": "2020-02-02",
        "commitResults": [
          {
            "hash": "644af05f28207975cb22771cb5f44a25a0ff90e4",
            "messageTitle": "[#1029] Contribution Bar: restore the float left property (#1030)",
            "messageBody": "Due to the regression of #1003, the css property \u0027float: left\u0027 was left\r\nout in the contribution bar. When break down by file type is checked,\r\nthe contribution bar for each file type occupies separate lines\r\ninstead of continuous lines.\r\n\r\nLet\u0027s restore the css property \u0027float: left\u0027 back to the contribution\r\nbar.",
            "insertions": 1,
            "deletions": 0
          }
        ]
      },
      {
        "insertions": 29,
        "deletions": 5,
        "date": "2020-02-05",
        "commitResults": [
          {
            "hash": "ebdd0140fe77d238eab878b42d58afe18fd03e02",
            "messageTitle": "[#1019] Handle commit info extraction for empty commits (#1020)",
            "messageBody": "Analyzing repo with empty commits causes CommitInfoAnalyzer to throw \r\nArrayIndexOutOfBoundsException. This occurs in \r\nCommitInfoExtractor#parseGitLogResults, where info lines and stat \r\nlines are split based on the last index of the newline character \r\n`\\n`.\r\n\r\nAs empty commits have no stat lines, it leads to \r\nArrayIndexOutOfBoundsException due to the use of new line separator.\r\n\r\nLet\u0027s:\r\n- use \u0027|\u0027 character as the splitting point of info lines and stat \r\n  lines, instead of the new line \u0027\\n\u0027 character. This will ensure \r\n  that the ref name details will always be within info lines instead\r\n  of stat lines.\r\n- add a check for the availability of the ref name before accessing \r\n  it to prevent the exception. \r\n\r\nNo stat lines occurs for commits that are empty (done by git commit \r\n--allow-empty), since no files are changed. The last index of the \r\nnewline character will situate before the ref name details, and info\r\nline will contain all characters before that index while stat line \r\ncontains the ref name details. Since the ref name is no longer in \r\nthe info lines, accessing the REF_NAME_INDEX within the info lines \r\nwill incur an ArrayOutOfBoundsException.\r\n",
            "insertions": 27,
            "deletions": 3
          },
          {
            "hash": "4611767400fc829913997f335afa5aed22917cd8",
            "messageTitle": "[#1027] Modify UI for tags (#1028)",
            "messageBody": "Some tags split to the next line when the list of tags are too long. \r\nTags also appear vertically close together when the list occupies \r\nmore than one line.\r\n\r\nLet\u0027s change the css property `display` to be `inline-block` and add \r\nsome top and bottom margins to each tag.\r\n",
            "insertions": 2,
            "deletions": 2
          }
        ]
      },
      {
        "insertions": 4,
        "deletions": 2,
        "date": "2020-02-22",
        "commitResults": [
          {
            "hash": "636f4d98583c49c18dc25fe66b0c4d196ad05271",
            "messageTitle": "[#999] Remove empty zoom__day divs (#1000)",
            "messageBody": "When granularity is set to week, the \u0027pushCommitsWeek\u0027 method gets \r\nall possible weeks (week 1, 2, 3, etc...) from start date until the \r\nend date and pushes it to \u0027user.commits\u0027, no matter the week has any \r\ncommits at all. Additionally, commits with zero insertions but with \r\ndeletions are also not taken into consideration in the commits \r\npanel.\r\n\r\nWeeks that have no commits is not useful and redundant. Commits with\r\nonly deletions are maybe useful as it may represent \r\nrefactoring/removing redundant code.\r\n\r\nLet\u0027s add a check to add a week only if it has commits. And remove \r\nthe check for commits with zero insertions, so that commits with \r\nonly deletions are also included.",
            "insertions": 4,
            "deletions": 2
          }
        ]
      },
      {
        "insertions": 1,
        "deletions": 1,
        "date": "2020-02-26",
        "commitResults": [
          {
            "hash": "a9f88fd727d8127f36ef6e33eaef81fb10338220",
            "messageTitle": "[#1043] Fix bug of incorrect commit dates when merge group (#1045)",
            "messageBody": "When merge group is checked, some commits are seen with committed\r\ndates that are incompatible to the real committed dates.\r\n\r\nCommits with the same date are appended together in \u0027mergedCommits\u0027.\r\nSince \u0027mergedCommits\u0027 is being sorted before all the merged commits \r\nfor a particular group is gathered, the order of the \u0027mergedCommits\u0027 \r\nis changed, and some commits with the same date are appended \r\nwrongly.\r\n\r\nLet\u0027s move the sorting of \u0027mergedCommits\u0027 after the all merged \r\ncommits are gathered, this will ensure commits with the same date \r\nare appended correctly.\r\n\r\nThe order of the \u0027mergedCommits\u0027 matters, as we use an additional js \r\nobject \u0027dateToIndexMap\u0027 maps dates to the corresponding index in \r\n\u0027mergedCommits\u0027. Once the order has changed, the \u0027dateToIndexMap\u0027 no \r\nlonger contains the accurate mappings and hence, commits are \r\nappended wrongly.\r\n",
            "insertions": 1,
            "deletions": 1
          }
        ]
      }
    ],
    "j-lum": [],
    "iskandarzulkarnaien": [],
    "xantho09": [],
    "0blivious": [
      {
        "insertions": 69,
        "deletions": 42,
        "date": "2019-12-17",
        "commitResults": [
          {
            "hash": "d6710418070622ecb723793f75ca810ad667e326",
            "messageTitle": "[#865] AuthorConfig: further improve the branch field (#878)",
            "messageBody": "In the author-config.csv, branch is an optional field that will\r\nautomatically uses the default branch in the repo field.\r\n\r\nHowever, this can be improved such that if the branch field is not\r\nfilled, we can bind that AuthorConfig to all the RepoConfig that has the\r\nsame repo\u0027s location irregardless of branch. This can help users to\r\neasily setup config files to analyse multiple branches of a repo.\r\n\r\nLet\u0027s bind the AuthorConfig to all the RepoConfig that has the same\r\nrepo\u0027s location irregardless of branch if the branch field is not\r\nfilled.",
            "tags": [
              "v1.10.1"
            ],
            "insertions": 69,
            "deletions": 42
          }
        ]
      },
      {
        "insertions": 35,
        "deletions": 13,
        "date": "2019-12-25",
        "commitResults": [
          {
            "hash": "57e70cf06674352e18c8a396e4fb7bf7dc8f517e",
            "messageTitle": "[#900] group-config.csv: make location optional (#914)",
            "messageBody": "In the group-config.csv, location is a compulsory field that only has one\r\nvalue.  Specifying groups for all repos requires the user to manually key\r\nin groups for each repo.\r\n\r\nHowever, this can be improved such that if the location field is not\r\nfilled, we can bind that GroupConfig to all the RepoConfig. This can\r\nhelp the user save the time listing all the possible combinations of\r\nrepos and groups when they want to specify groups for all repos.\r\n\r\nLet\u0027s bind the GroupConfig to all the RepoConfig if the location\r\nfield is not filled.",
            "insertions": 35,
            "deletions": 13
          }
        ]
      },
      {
        "insertions": 2,
        "deletions": 2,
        "date": "2020-01-17",
        "commitResults": [
          {
            "hash": "3fd1f5fa8c531e5274fcb0dd90e83ddaf76d1d1f",
            "messageTitle": "[#980] URL: date adapted without validation (#990)",
            "messageBody": "Date in authorship can be modified using URL. However, a date range will \r\nstill be adapted even if it is invalid.\r\n\r\nThis can be fixed by adding extra validation function for window hash.\r\n\r\nLet\u0027s put a validation for the date parameters in the URL.",
            "insertions": 2,
            "deletions": 2
          }
        ]
      },
      {
        "insertions": 0,
        "deletions": 29,
        "date": "2020-01-21",
        "commitResults": [
          {
            "hash": "b40b3e6788c444b6ca46cd59b8e70e9afa29e86e",
            "messageTitle": "[#1009] AppVeyor Failing: remove outdated tests (#1015)",
            "messageBody": "AppVeyor CI is failing in all PRs as it has updated its worker \r\nimage, which uses Git 2.25 instead of Git 2.23.\r\n\r\nFrom Git v2.24, Git for windows would print error for an illegal\r\nfile name and prevent it from adding into the index. As in our test \r\ncases we run the command `git checkout someInvalidName`, an \r\nexception is expected to be thrown, and since we do not catch it, \r\nthe tests fail. \r\n\r\nLet\u0027s remove the 2 outdated test as the git command now handles\r\ndetection of invalid filename and will throw exception at the very\r\nbeginning.",
            "insertions": 0,
            "deletions": 29
          }
        ]
      },
      {
        "insertions": 26,
        "deletions": 1,
        "date": "2020-01-23",
        "commitResults": [
          {
            "hash": "6fe782466dc827ab5c37c095000dfaba6e2ee3db",
            "messageTitle": "[#885] Allow reset search filter (#895)",
            "messageBody": "The user has to manually delete the keywords and press another enter \r\nto go back to the full view.\r\n\r\nHowever, this can be improved by providing a reset button to clear \r\nthe search bar, which can help the user save time for deleting. \r\n\r\nLet\u0027s provide a button to reset the search bar.",
            "insertions": 26,
            "deletions": 1
          }
        ]
      },
      {
        "insertions": 5,
        "deletions": 0,
        "date": "2020-01-29",
        "commitResults": [
          {
            "hash": "c6f711cf2fe0015d204e953d3dfb6f252a9104d6",
            "messageTitle": " [#988] Ramp chart: inconsistency in the length of contribution line (#991)",
            "messageBody": "Toggling the `breakdown by filetype` checkbox changes the length of the\r\ncontribution bar even though the LoC remains constant.\r\n\r\nThis occurs due to the inaccurate data in json file. The\r\nauthorFileTypeContributionMap in commit.json have multiple entries of the \r\nsame key. In the frontend, the last entry would be taken instead of all \r\nof the entries provided. This results in the wrong calculation of the total \r\ncontribution of each file type.\r\n\r\nLet\u0027s override FileType#hashCode to correctly update the LoC number \r\ninstead of creating a new entry.\r\n\r\nIn the backend, we use AuthorshipSummary#addAuthorContributionCount\r\nto increment line number and we consider FileType (the key) and\r\nLoC (the value) as an entry in the HashMap. The HashMap is then output\r\nto the commit.json file as authorFileTypeContributionMap. However, the \r\ndefault HashCode will digest all data stored in FileType, other data \r\nlike path and pathsGlob is also taken into consideration when comparing \r\nthe key to update the entry. So, instead of updating, a new entry will \r\nbe created. Thus in AuthorshipSummary#authorFileTypeContributionMap, \r\neach author can have multiple entry with same FileType#label. And the \r\nresulted authorFileTypeContributionMap in json file will have multiple \r\nentry of the same key.\r\n",
            "insertions": 5,
            "deletions": 0
          }
        ]
      },
      {
        "insertions": 24,
        "deletions": 8,
        "date": "2020-02-05",
        "commitResults": [
          {
            "hash": "a9fedc6689c5bea63706bde2c01101b42b058cb2",
            "messageTitle": "[#920] Ramp chart: show percentile for each item (#922)",
            "messageBody": "We have index number for each group in the ramp chart but not its\r\npercentile. It is hard to tell the ranking position of the group.\r\n\r\nThis can be improved to show the percentile of each item so that it\r\nis easy to see whether an item is in the 20%th percentile and so on.\r\n\r\nLet\u0027s add a percentile number at the right side of each group.\r\n",
            "insertions": 24,
            "deletions": 8
          }
        ]
      },
      {
        "insertions": 45,
        "deletions": 31,
        "date": "2020-02-10",
        "commitResults": [
          {
            "hash": "61f1fc4f4f854a176ab1f6672f6759c42712c9c3",
            "messageTitle": "[#838] ZoomTab: add sort controls  (#943)",
            "messageBody": "We have Zoom tab shows the list of commits in the order from\r\nearliest to latest commits (without an option to reverse the sorting\r\norder or change the sorting type).\r\n\r\nThis can be improved by allowing the user to view the commits in\r\nreverse chronological order and add other sorting options such as\r\nLOC.\r\n\r\nLet\u0027s add a sorting field to allow the user to sort the commits\r\naccording to Loc or time, and also allow the commits to be\r\ndisplayed in reverse order.",
            "insertions": 45,
            "deletions": 31
          }
        ]
      },
      {
        "insertions": 1,
        "deletions": 0,
        "date": "2020-02-19",
        "commitResults": [
          {
            "hash": "3a5e0219948b34c78786e2e91d70a301fc3c7bc1",
            "messageTitle": "[#1031] Commits panel: ramp appears outside row (#1034)",
            "messageBody": "The ramp slice in Commits panel may appear outside of the blue \r\nrectangle.\r\n\r\nWe should crop the ramp slice if it appears outside of the row, like\r\nwhat we did for the Chart panel.\r\n\r\nLet\u0027s set the overflow property to be hidden for the ramp div.",
            "insertions": 1,
            "deletions": 0
          }
        ]
      },
      {
        "insertions": 44,
        "deletions": 64,
        "date": "2020-02-22",
        "commitResults": [
          {
            "hash": "cd9e636fec6c7919fc50ed040da195e699760fa3",
            "messageTitle": "[#1023] Authorship Panel: expand all button always appear when first open the page (#1040)",
            "messageBody": "The `expand all` button will always appear on the authorship panel \r\nwhen we first open the page or when refresh the page, until the\r\nloading is complete. The button to display is supposed to be\r\n`collapse all` as we are to display all the file details initially.\r\n\r\nLet\u0027s display the `collapse all` button at the very beginning, and \r\nupdate all relevant checkboxes, radio buttons using proper Vue \r\nmodel.\r\n",
            "insertions": 44,
            "deletions": 64
          }
        ]
      },
      {
        "insertions": 21,
        "deletions": 4,
        "date": "2020-02-25",
        "commitResults": [
          {
            "hash": "bb4316ce679041b27f2b5e8a4b95799c8383159f",
            "messageTitle": "[#1071] Zoom view: provide a way to highlight the commit (#1075)",
            "messageBody": "Clicking a tag jumps to a list of commits full of tags. Users may\r\nnot be able to find the commit with that tag easily.\r\n\r\nWe can highlight the resulting commit with that particular tag by \r\nproviding a light blue border around the message div.\r\n\r\nLet\u0027s add a focus property to the commit message body.\r\n",
            "insertions": 21,
            "deletions": 4
          }
        ]
      }
    ],
    "hcwong": [],
    "ang-zeyu": [
      {
        "insertions": 4,
        "deletions": 1,
        "date": "2019-12-24",
        "commitResults": [
          {
            "hash": "e207c43b84143dcd81a2581c1501f51cb54ef937",
            "messageTitle": "Fix additional upward movement on expanding code (#966)",
            "messageBody": "Clicking the expand button may cause the code to move up a bit \r\nbefore expanding. This occurs more frequently when the number of \r\ncode lines to load is large, or the client is slow. \r\n\r\nThis is due to asynchronous data loading by Vue, causing observable \r\nCSS updates to the code block before the code has been loaded into \r\nthe DOM.\r\n\r\nLet\u0027s execute the CSS change for the code block only after the \r\nsegment\u0027s code lines have been loaded.",
            "insertions": 4,
            "deletions": 1
          }
        ]
      }
    ],
    "geshuming": [],
    "alyip98": [],
    "nbriannl": [],
    "tiuweehan": [],
    "madanalogy": [],
    "daekoon": []
  },
  "authorFinalContributionMap": {
    "ccyccyccy": 20,
    "Parcly-Taxel": 0,
    "niqiukun": 0,
    "openorclose": 0,
    "yash-chowdhary": 7,
    "anubh-v": 319,
    "Tejas2805": 648,
    "dvrylc": 0,
    "jamessspanggg": 188,
    "j-lum": 0,
    "iskandarzulkarnaien": 0,
    "xantho09": 0,
    "0blivious": 168,
    "hcwong": 0,
    "ang-zeyu": 3,
    "geshuming": 0,
    "alyip98": 0,
    "nbriannl": 0,
    "tiuweehan": 0,
    "madanalogy": 0,
    "daekoon": 0
  },
  "authorFileTypeContributionMap": {
    "ccyccyccy": {
      "java": 16,
      "js": 4,
      "scss": 0,
      "json": 0,
      "md": 0,
      "py": 0,
      "jade": 0,
      "gradle": 0
    },
    "Parcly-Taxel": {
      "java": 0,
      "js": 0,
      "scss": 0,
      "json": 0,
      "md": 0,
      "py": 0,
      "jade": 0,
      "gradle": 0
    },
    "niqiukun": {
      "java": 0,
      "js": 0,
      "scss": 0,
      "json": 0,
      "md": 0,
      "py": 0,
      "jade": 0,
      "gradle": 0
    },
    "openorclose": {
      "java": 0,
      "js": 0,
      "scss": 0,
      "json": 0,
      "md": 0,
      "py": 0,
      "jade": 0,
      "gradle": 0
    },
    "yash-chowdhary": {
      "java": 0,
      "js": 7,
      "scss": 0,
      "json": 0,
      "md": 0,
      "py": 0,
      "jade": 0,
      "gradle": 0
    },
    "anubh-v": {
      "java": 284,
      "js": 0,
      "scss": 34,
      "json": 0,
      "md": 1,
      "py": 0,
      "jade": 0,
      "gradle": 0
    },
    "Tejas2805": {
      "java": 0,
      "js": 19,
      "scss": 537,
      "json": 26,
      "md": 66,
      "py": 0,
      "jade": 0,
      "gradle": 0
    },
    "dvrylc": {
      "java": 0,
      "js": 0,
      "scss": 0,
      "json": 0,
      "md": 0,
      "py": 0,
      "jade": 0,
      "gradle": 0
    },
    "jamessspanggg": {
      "java": 179,
      "js": 8,
      "scss": 1,
      "json": 0,
      "md": 0,
      "py": 0,
      "jade": 0,
      "gradle": 0
    },
    "j-lum": {
      "java": 0,
      "js": 0,
      "scss": 0,
      "json": 0,
      "md": 0,
      "py": 0,
      "jade": 0,
      "gradle": 0
    },
    "iskandarzulkarnaien": {
      "java": 0,
      "js": 0,
      "scss": 0,
      "json": 0,
      "md": 0,
      "py": 0,
      "jade": 0,
      "gradle": 0
    },
    "xantho09": {
      "java": 0,
      "js": 0,
      "scss": 0,
      "json": 0,
      "md": 0,
      "py": 0,
      "jade": 0,
      "gradle": 0
    },
    "0blivious": {
      "java": 68,
      "js": 67,
      "scss": 23,
      "json": 0,
      "md": 10,
      "py": 0,
      "jade": 0,
      "gradle": 0
    },
    "hcwong": {
      "java": 0,
      "js": 0,
      "scss": 0,
      "json": 0,
      "md": 0,
      "py": 0,
      "jade": 0,
      "gradle": 0
    },
    "ang-zeyu": {
      "java": 0,
      "js": 3,
      "scss": 0,
      "json": 0,
      "md": 0,
      "py": 0,
      "jade": 0,
      "gradle": 0
    },
    "geshuming": {
      "java": 0,
      "js": 0,
      "scss": 0,
      "json": 0,
      "md": 0,
      "py": 0,
      "jade": 0,
      "gradle": 0
    },
    "alyip98": {
      "java": 0,
      "js": 0,
      "scss": 0,
      "json": 0,
      "md": 0,
      "py": 0,
      "jade": 0,
      "gradle": 0
    },
    "nbriannl": {
      "java": 0,
      "js": 0,
      "scss": 0,
      "json": 0,
      "md": 0,
      "py": 0,
      "jade": 0,
      "gradle": 0
    },
    "tiuweehan": {
      "java": 0,
      "js": 0,
      "scss": 0,
      "json": 0,
      "md": 0,
      "py": 0,
      "jade": 0,
      "gradle": 0
    },
    "madanalogy": {
      "java": 0,
      "js": 0,
      "scss": 0,
      "json": 0,
      "md": 0,
      "py": 0,
      "jade": 0,
      "gradle": 0
    },
    "daekoon": {
      "java": 0,
      "js": 0,
      "scss": 0,
      "json": 0,
      "md": 0,
      "py": 0,
      "jade": 0,
      "gradle": 0
    }
  },
  "authorContributionVariance": {
    "ccyccyccy": 2.0515642,
    "Parcly-Taxel": 0.0,
    "niqiukun": 0.0,
    "openorclose": 0.0,
    "yash-chowdhary": 1.7976658,
    "anubh-v": 489.24664,
    "Tejas2805": 4446.3984,
    "dvrylc": 0.0,
    "jamessspanggg": 226.80066,
    "j-lum": 0.0,
    "iskandarzulkarnaien": 0.0,
    "xantho09": 0.0,
    "0blivious": 354.74182,
    "hcwong": 0.0,
    "ang-zeyu": 0.26592606,
    "geshuming": 0.0,
    "alyip98": 0.0,
    "nbriannl": 0.0,
    "tiuweehan": 0.0,
    "madanalogy": 0.0,
    "daekoon": 0.0
  },
  "authorDisplayNameMap": {
    "ccyccyccy": "CHON..YUAN",
    "Parcly-Taxel": "JERE..ERUI",
    "niqiukun": "NI T..ZHEN",
    "openorclose": "DARY.. TAN",
    "yash-chowdhary": "YASH..HARY",
    "anubh-v": "ANUB..BHAV",
    "Tejas2805": "TEJA..ANIA",
    "dvrylc": "CHAN..ARYL",
    "jamessspanggg": "JAME.. WAI",
    "j-lum": "LUM ..FFRY",
    "iskandarzulkarnaien": "ISKA..AINI",
    "xantho09": "MUHA..INAL",
    "0blivious": "LIU ..IWEN",
    "hcwong": "JOSH..HIEN",
    "ang-zeyu": "ANG ..E YU",
    "geshuming": "GE S..MING",
    "alyip98": "YIP ..YEUN",
    "nbriannl": "LABA..RIDO",
    "tiuweehan": "TIU .. HAN",
    "madanalogy": "MUHA..JJAJ",
    "daekoon": "LIM ..KOON"
  }
}
